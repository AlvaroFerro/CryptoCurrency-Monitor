"%Y/%m/%d"), origin = "1970-01-01")
return(date)
}
hchart(df, "line",  hcaes(datetime_to_timestamp(as.Date(convertDate(df$values.x), origin = '1970-01-01')), values.y)) %>%
hc_xAxis(type = "datetime", dateTimeLabelFormats = list(day = '%d of %b'))
sessionInfo()
##### It's working #########
hchart(df, "line",  hcaes(datetime_to_timestamp(as.Date(convertDate(df$values.x), origin = '1970-01-01')), round(values.y, 2))) %>%
hc_xAxis(type = "datetime", dateTimeLabelFormats = list(day = '%d of %b'))
##### It's working #########
hchart(df, "line",  hcaes(datetime_to_timestamp(as.Date(convertDate(df$values.x), origin = '1970-01-01')), round(values.y, 2))) %>%
hc_xAxis(type = "datetime", dateTimeLabelFormats = list(day)) %>%
hc_title('')
= '%d of %b'
##### It's working #########
hchart(df, "line",  hcaes(datetime_to_timestamp(as.Date(convertDate(df$values.x), origin = '1970-01-01')), round(values.y, 2))) %>%
hc_xAxis(type = "datetime", dateTimeLabelFormats = list(day = '%d of %b')) %>%
hc_title('Algo')
##### It's working #########
hchart(df, "line",  hcaes(datetime_to_timestamp(as.Date(convertDate(df$values.x), origin = '1970-01-01')), round(values.y, 2))) %>%
hc_xAxis(type = "datetime", dateTimeLabelFormats = list(day = '%d of %b')) %>%
hc_title('Algo')
##### It's working #########
hchart(df, "line",  hcaes(datetime_to_timestamp(as.Date(convertDate(df$values.x), origin = '1970-01-01')), round(values.y, 2))) %>%
hc_xAxis(type = "datetime", dateTimeLabelFormats = list(day = '%d of %b')) %>%
hc_title(text = 'Algo')
##### It's working #########
hchart(df, "line",  hcaes(datetime_to_timestamp(as.Date(convertDate(df$values.x), origin = '1970-01-01')), round(values.y, 2))) %>%
hc_xAxis(type = "datetime", dateTimeLabelFormats = list(month = '%b')) %>%
hc_title(text = 'Algo')
##### It's working #########
hchart(df, "line",  hcaes(datetime_to_timestamp(as.Date(convertDate(df$values.x), origin = '1970-01-01')), round(values.y, 2))) %>%
hc_xAxis(type = "datetime") %>%
hc_title(text = 'Algo')
hchart(df, 'line', hcaes(x = convertDate(values.x), y = values.y))
hchart(df, 'line', hcaes(x = as.Date(convertDate(values.x), origin = '1970-01-01'), y = values.y))
df <- as.data.frame(fromJSON('https://api.blockchain.info/charts/market-price?timespan=1year&format=json'))
##### It's working #########
hchart(df, "line",  hcaes(datetime_to_timestamp(as.Date(convertDate(df$values.x), origin = '1970-01-01')), round(values.y, 2))) %>%
hc_xAxis(type = "datetime") %>%
hc_title(text = 'Algo')
shiny::runApp('html')
shiny::runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
shiny::runApp('html')
shiny::runApp('html')
getwd()
setwd('html')
getwd()
runApp()
runApp()
library(rsconnect)
library(rsconnect)
deployApp()
deployApp()
runApp()
runApp()
deployApp()
deployApp()
runApp()
runApp()
deployApp()
deployApp()
deployApp()
deployApp()
rsconnect::showLogs()
deployApp()
runApp()
library(shiny)
install.packages("shiny")
shiny::runApp('html')
shiny::runApp('html')
shiny::runApp('html')
shiny::runApp('html')
runApp('html')
getDataFrame('trade-volumen')
getDataFrame()
getDataFrame(chart = 'trade-volume')
getDataFrame(chart = 'trade-volume', average = T)
runApp('html')
runApp('html')
library(cryptor)
get_social(1182)
social <- get_social(1182)
social$similar_items
social$page_views
social$crypto_compare_summary
social$social_media
social$social_media$Twitter
get_coins()
get_coins()
get_price()
get_coin_snapshot(1182)
get_historical_price("NEO", "USD")
d <- get_historical_price("NEO", "USD")
d
View(d)
get_exchanges()
get_coins()
get_exchanges()
get_coins()
select(get_coins(), coin_name == 'Bitcoin')
d <- get_coins()
View(d)
d %>% group_by(algorithm) %>% head()
d %>% group_by(algorithm)
runApp('html')
shiny::runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
rsconnect::deployApp()
runApp('html')
runApp('html')
shiny::runApp('html')
runApp('html')
runApp('html')
install.packages("crypto")
library(crypto)
crypto_history(limit = 30)
crypto_list()
crypto_history('xrp')
replace_encoding()
sys_locale <- Sys.getlocale('LC_TIME')
replace_encoding(sys_locale = sys_locale)
crypto_history('xrp')
crypto_history(limit = 1)
get_api_limit()
library(cryptor)
get_api_limit()
get_coins()
get_social(1182)
h <- get_social(1182)
h$social_media$Facebook
d %>% select(id) %>% group_by(algorithm)
d <- get_coins()
d %>% select(id) %>% group_by(algorithm)
d %>% group_by(algorithm) %>% select(id)
View(d)
View(d)
d %>% group_by(algorithm) %>% select(coin_name)
d %>% group_by(algorithm) %>% select(coin_name)
data_test <- d %>% group_by(algorithm) %>% select(coin_name)
ggplot(data_test) + geom_histogram(aes(coin_name))
ggplot(data_test) + geom_smooth(aes(coin_name, algorithm))
ggplot(data_test) + geom_bar(aes(coin_name, algorithm))
ggplot(data_test) + geom_bar(aes(algorithm))
ggplot(data_test) + geom_bar(aes(algorithm)) + coord_polar('y', start = 0)
data_test <- d %>% group_by(algorithm)
ggplot(data_test) + geom_bar(aes(algorithm)) + coord_polar('y', start = 0)
data_test <- d %>% group_by(algorithm) %>% filter(algorithm %in% 'SHA')
ggplot(data_test) + geom_bar(aes(algorithm)) + coord_polar('y', start = 0)
data_test <- d %>% group_by(algorithm) %>% filter(algorithm %in% 'SHA256')
ggplot(data_test) + geom_bar(aes(algorithm)) + coord_polar('y', start = 0)
View(data_test)
View(data_test)
d$algorithm
unique(d$algorithm)
runApp('html')
h <- get_social(5031)
h$social_media$Facebook
get_price_details('XRP', 'EUR')
get_price('XRP')
get_price('XRP', 'USD')
get_price('XRP', c('USD', 'EUR', 'JPY'))
get_price('XRP', c('USD', 'EUR', 'JPY', 'CHF'))
get_price('XRP', c('USD', 'EUR', 'JPY', 'CHF', 'DZD'))
get_price('XRP', c('USD', 'EUR', 'JPY', 'CHF', 'DZD', 'ATS'))
get_price('XRP', c('USD', 'EUR', 'JPY', 'CHF', 'DZD', 'ATS', 'ALL'))
get_price('XRP', c('USD', 'EUR', 'JPY', 'CHF', 'DZD', 'ATS', 'ALL', 'GEL'))
get_price(c('XRP', 'BTC'), c('USD', 'EUR', 'JPY', 'CHF', 'DZD', 'ATS', 'ALL', 'GEL'))
get_price_details('XRP', 'EUR')
get_historical_price('XRP')
get_historical_price('XRP', 'EUR')
get_historical_price('XRP', 'EUR', all_data = T)
z <- get_historical_price('XRP', 'EUR', all_data = T)
View(z)
View(z)
ggplot(z) + geom_smooth(aes(time, close))
ggplot(z) + geom_smooth(aes(time, close)) + geom_smooth(aes(time, open))
ggplot(z) + geom_smooth(aes(time, close)) + geom_smooth(aes(time, open)) + geom_smooth(aes(time, volumenfrm))
ggplot(z) + geom_smooth(aes(time, close)) + geom_smooth(aes(time, open)) + geom_smooth(aes(time, volumenfrom))
ggplot(z) + geom_smooth(aes(time, close)) + geom_smooth(aes(time, open)) + geom_smooth(aes(time, volumefrom))
ggplot(z) + geom_smooth(aes(time, close)) + geom_smooth(aes(time, open)) + geom_smooth(aes(time, volumefrom)) + geom_smooth(aes(time, volumeto))
highchart() %>%
hc_chart(type = "line") %>%
hc_xAxis(categories = z$time) %>%
hc_add_series(data = z$close,
name = "mpg data",colorByPoint = TRUE) %>%
hc_add_theme(hc_theme_chalk())
highchart() %>%
hc_chart(type = "line") %>%
hc_xAxis(categories = z$time) %>%
hc_add_series(data = z$close,
name = "mpg data",colorByPoint = TRUE) %>%
hc_add_theme(hc_theme_538())
highchart() %>%
hc_chart(type = "line") %>%
hc_xAxis(categories = z$time) %>%
hc_add_series(data = z$close) %>%
hc_add_theme(hc_theme_538())
hc_add_theme(hc_theme_538())
highchart() %>%
hc_chart(type = "line") %>%
hc_xAxis(categories = z$time) %>%
hc_add_series(data = z$close) %>%
hc_add_series(data = z$high) %>%
hc_add_theme(hc_theme_538())
highchart() %>%
hc_chart(type = "line") %>%
hc_xAxis(categories = z$time, name = 'Time') %>%
hc_add_series(data = z$close, name = 'Cierre') %>%
hc_add_theme(hc_theme_538())
highchart() %>%
hc_chart(type = "line") %>%
hc_xAxis(categories = z$time) %>%
hc_add_series(data = z$close, name = 'Cierre') %>%
hc_add_theme(hc_theme_538())
highchart() %>%
hc_chart(type = "line") %>%
hc_xAxis(categories = z$time) %>%
hc_add_series(data = z$close, name = 'Cierre') %>%
hc_add_series(data = z$high, name = 'High') %>%
hc_add_theme(hc_theme_538())
highchart() %>%
hc_chart(type = "line") %>%
hc_xAxis(categories = z$time) %>%
hc_add_series(data = z$low, name = 'Low') %>%
hc_add_series(data = z$high, name = 'High') %>%
hc_add_theme(hc_theme_538())
highchart() %>%
hc_chart(type = "stock") %>%
hc_xAxis(categories = z$time) %>%
hc_add_series(data = z$low, name = 'Low') %>%
hc_add_series(data = z$high, name = 'High') %>%
hc_add_theme(hc_theme_538())
highchart() %>%
hc_chart(type = "line") %>%
hc_xAxis(categories = z$time) %>%
hc_add_series(data = z$low, name = 'Low') %>%
hc_add_series(data = z$high, name = 'High') %>%
hc_add_theme(hc_theme_538())
library("quantmod")
usdjpy <- getSymbols("USD/JPY", src = "oanda", auto.assign = FALSE)
usdjpy
z
shiny::runApp('html')
shiny::runApp('html')
runApp('html')
get_historical_price()
View(d)
View(d)
d %>% select(name, coin_name, full_name)
d %>% select(name, coin_name, full_name) %>% filter(full_name, contains('Ether'))
d %>% select(name, coin_name, full_name) %>% filter(full_name %in% 'Ether')
d %>% select(name, coin_name, full_name) %>% filter(coin_name %in% 'Ether')
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Ether"))
library(stringr)
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Ether"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Ethereum"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "stell"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Stell"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Tether"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "EOS"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Litecoi"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Bitcoin C"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Bitcoin S"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "TRON"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Cardano"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Monero"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Iota"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Io"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Binance"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "NEM"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Dash"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Ethereum"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "NEO"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Zcash"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Zca"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Maker"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Dogecoin"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Waves"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Tezos"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "True"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "USD"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Bitcoin"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "Bitcoin G"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "VeChain"))
d %>% select(name, coin_name, full_name) %>% filter(str_detect(coin_name, "OmiseGo"))
runApp('html')
runApp('html')
runApp('html')
View(AirPassengers)
View(dff)
View(dff)
airforecast <- forecast(auto.arima(AirPassengers), level = 95)
library("forecast")
airforecast <- forecast(auto.arima(AirPassengers), level = 95)
hchart(airforecast)
library(highcharter)
hchart(airforecast)
View(AirPassengers)
get_historical_price('BTC', 'EUR')
library(rjson)
library(jsonlite)
library(RCurl)
library(cryptor)
library(highcharter)
library(httr)
library(magrittr)
library(timeSeries)
library(scales)
library(ggplot2)
library(tibble)
library(Rcpp)
library(crypto)
get_historical_price('BTC', 'EUR')
get_historical_price('BTC', 'EUR')
get_historical_price('BTC', 'EUR')
get_historical_price('BTC', 'EUR')
BTC <- get_historical_price('BTC', 'EUR')
BTCOpen <- BTC$open
airforecast <- forecast(auto.arima(BTCOpen), level = 5)
library("forecast")
airforecast <- forecast(auto.arima(BTCOpen), level = 5)
hchart(airforecast)
View(BTCOpen)
BTCOpen <- c(BTC$time, BTC$open)
View(BTCOpen)
View(BTC)
View(BTC)
BTCOpen <- BTC[, c(1,5)]
View(BTCOpen)
rownames(BTCOpen) <- BTCOpen$time
BTCOpen <- as.data.frame(BTCOpen)
rownames(BTCOpen) <- BTCOpen$time
View(BTCOpen)
BTCOpen <- BTCOpen[, -1]
airforecast <- forecast(auto.arima(BTCOpen), level = 5)
hchart(airforecast)
BTC <- get_historical_price('XRP', 'EUR')
BTCOpen <- BTC[, c(1,5)]
BTCOpen <- as.data.frame(BTCOpen)
rownames(BTCOpen) <- BTCOpen$time
BTCOpen <- BTCOpen[, -1]
library("forecast")
airforecast <- forecast(auto.arima(BTCOpen), level = 5)
hchart(airforecast)
library(xts)
xBTC <- xts(BTCOpen)
BTC <- get_historical_price('XRP', 'EUR')
BTCOpen <- BTC[, c(1,5)]
BTCOpen <- as.data.frame(BTCOpen)
xBTC <- xts(BTCOpen, order.by = BTCOpen[, 1])
View(xBTC)
xBTC <- xBTC[, -1]
xBTC <- to.daily(xBTC)
xBTC <- to.daily(xBTC)
zBTC <- as.zoo(xBTC$open)
airforecast <- forecast(auto.arima(zBTC), level = 5)
View(zBTC)
airforecast <- forecast(auto.arima(zBTC$open), level = 5)
oBTC <- window(zBTC,start = index(zBTC[1]), end = index(zBTC[31 - 0]))
airforecast <- forecast(auto.arima(oBTC), level = 5)
BTC <- get_historical_price('XRP', 'EUR')
BTCOpen <- BTC[, c(1,5)]
BTCOpen <- as.data.frame(BTCOpen)
xBTC <- xts(BTCOpen, order.by = BTCOpen[, 1])
xBTC <- xBTC[, -1]
oBTC <- window(zBTC,start = index(zBTC[1]), end = index(zBTC[31 - 0]))
airforecast <- forecast(auto.arima(oBTC), level = 5)
oBTC <- window(xBTC,start = index(xBTC[1]), end = index(xBTC[31 - 0]))
airforecast <- forecast(auto.arima(oBTC), level = 5)
xBTC <- to.weekly(xBTC)
xBTC <- to.weekly(xBTC, 'days')
xBTC <- to.daily(xBTC, 'days')
BTC <- get_historical_price('XRP', 'EUR')
BTCOpen <- BTC[, c(1,5)]
BTCOpen <- as.data.frame(BTCOpen)
xBTC <- xts(BTCOpen, order.by = BTCOpen[, 1])
View(xBTC)
xBTC <- xBTC[, -1]
View(xBTC)
xBTC <- to.daily(xBTC)
BTC <- get_historical_price('XRP', 'EUR')
BTCOpen <- BTC[, c(1,5)]
BTCOpen <- as.data.frame(BTCOpen)
xBTC <- xts(BTC[,-1], BTC[,1])
View(BTCOpen)
BTC <- get_historical_price('XRP', 'EUR')
BTCOpen <- BTC[, c(1,5)]
BTCOpen <- as.data.frame(BTCOpen)
BTCOpen$time <- as.Date(BTCOpen$time, format = "%Y/%m/%d")
xBTC <- xts(BTCOpen[,-1], BTCOpen[,1])
View(xBTC)
xBTC <- to.daily(xBTC)
View(xBTC)
zBTC <- as.zoo(xBTC$xBTC.Open)
airforecast <- forecast(auto.arima(zBTC), level = 5)
hchart(airforecast)
airforecast <- forecast(auto.arima(zBTC$xBTC.Open), level = 5)
hchart(airforecast)
etsfit <- ets(zBTC)
fventas.ets=forecast(etsfit)
plot(fventas.ets)
View(zBTC)
hchart(fventas.ets)
BTC <- get_historical_price('XRP', 'EUR')
BTCOpen <- BTC[, c(1,5)]
BTCOpen <- as.data.frame(BTCOpen)
BTCOpen$time <- as.Date(BTCOpen$time, format = "%Y/%m/%d")
airforecast <- forecast(auto.arima(BTCOpen$open), level = 5)
hchart(airforecast)
plot <- highchart() %>%
hc_chart(type = "line") %>%
hc_xAxis(categories = BTCOpen$time) %>%
hc_add_series(data = BTCOpen$open, name = 'Open')
plot
plot <- highchart() %>%
hc_chart(type = "line") %>%
hc_xAxis(categories = BTCOpen$time) %>%
hc_add_series(data = airforecast, name = 'Open')
plot
plot <- highchart() %>%
hc_chart(type = "line") %>%
hc_xAxis(categories = BTCOpen$time) %>%
hc_add_series(data = BTCOpen$open, name = 'Open') %>%
hc_add_series(data = airforecast, name = 'Forecast')
plot
airforecast <- forecast(auto.arima(BTCOpen$open), level = 5)
hchart(airforecast)
shiny::runApp('html')
runApp('html')
BTC <- get_historical_price('XRP', 'GBP')
View(BTC)
View(BTC)
BTC <- get_historical_price('XRP', 'HRK')
View(BTC)
View(BTC)
BTC <- get_historical_price('XRP', 'CZK')
BTC <- get_historical_price('XRP', 'DKK')
BTC <- get_historical_price('XRP', 'HUF')
BTC <- get_historical_price('XRP', 'PLN')
BTC <- get_historical_price('XRP', 'RON')
BTC <- get_historical_price('XRP', 'SEK')
BTC <- get_historical_price('XRP', 'CHF')
View(BTC)
View(BTC)
runApp('html')
BTCOpen <- BTC[, c(1,'open')]
BTC <- get_historical_price('XRP', 'CHF')
BTCOpen <- BTC[, c(1,'open')]
View(BTC)
View(BTC)
BTCOpen <- BTC[, c('time','open')]
View(BTC)
View(BTC)
View(BTCOpen)
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
runApp('html')
rsconnect::deployApp()
deployApp()
rsconnect::setAccountInfo(name='alvaroferro',
token='90E926CD17BE820ADF7C9D32070DC7AF',
secret='6GDiOsSV04TcamS7hi8kNKvkWAfaqbRFRk0nn00U')
getwd()
setwd('E:/OneDrive/CUNEF - MDS/Técnicas de Visualización en DS/ProyectoFinal/html')
getwd()
deployApp()
deployApp()
install.packages("crypto")
deployApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('html')
getwd()
setwd('E:/OneDrive/CUNEF - MDS/Técnicas de Visualización en DS/ProyectoFinal/html')
rsconnect::deployApp()
runApp()
runApp()
rsconnect::deployApp()
sessionInfo()
runApp()
rsconnect::deployApp()
